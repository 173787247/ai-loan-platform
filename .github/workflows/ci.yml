name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root123
          MYSQL_DATABASE: ai_loan_platform
          MYSQL_USER: ai_loan
          MYSQL_PASSWORD: ai_loan123
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:6.0
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build backend services
      run: |
        cd backend
        mvn clean compile -DskipTests
    
    - name: Run backend tests
      run: |
        cd backend
        mvn test
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: frontend/web-app/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend/web-app
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend/web-app
        npm run build
    
    - name: Run frontend tests
      run: |
        cd frontend/web-app
        npm test -- --coverage --watchAll=false
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install AI services dependencies
      run: |
        cd ai-services
        pip install -r requirements.txt
    
    - name: Run AI services tests
      run: |
        cd ai-services
        python -m pytest tests/ -v

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker images
      run: |
        docker build -t ai-loan-platform/gateway:latest ./backend/ai-loan-gateway
        docker build -t ai-loan-platform/user-service:latest ./backend/ai-loan-user
        docker build -t ai-loan-platform/web-app:latest ./frontend/web-app
        docker build -t ai-loan-platform/ai-service:latest ./ai-services
        
        docker push ai-loan-platform/gateway:latest
        docker push ai-loan-platform/user-service:latest
        docker push ai-loan-platform/web-app:latest
        docker push ai-loan-platform/ai-service:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # 这里添加生产环境部署逻辑
